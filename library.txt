import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.sql.*;

public class LibraryManagementSystem extends Application {
    private static Connection conn;

    public static void main(String[] args) {
        connectDatabase();
        launch(args);
    }

    @Override
    public void start(Stage stage) {
        // GUI Components
        Label titleLabel = new Label("Title:");
        TextField titleField = new TextField();

        Label authorLabel = new Label("Author:");
        TextField authorField = new TextField();

        Label yearLabel = new Label("Year:");
        TextField yearField = new TextField();

        Label isbnLabel = new Label("ISBN:");
        TextField isbnField = new TextField();

        Button addButton = new Button("Add Book");
        Label statusLabel = new Label();

        TableView<Book> table = new TableView<>();
        ObservableList<Book> books = FXCollections.observableArrayList();

        TableColumn<Book, String> titleCol = new TableColumn<>("Title");
        titleCol.setCellValueFactory(new PropertyValueFactory<>("title"));

        TableColumn<Book, String> authorCol = new TableColumn<>("Author");
        authorCol.setCellValueFactory(new PropertyValueFactory<>("author"));

        TableColumn<Book, Integer> yearCol = new TableColumn<>("Year");
        yearCol.setCellValueFactory(new PropertyValueFactory<>("year"));

        TableColumn<Book, String> isbnCol = new TableColumn<>("ISBN");
        isbnCol.setCellValueFactory(new PropertyValueFactory<>("isbn"));

        table.getColumns().addAll(titleCol, authorCol, yearCol, isbnCol);
        table.setItems(books);

        addButton.setOnAction(e -> {
            String title = titleField.getText();
            String author = authorField.getText();
            String yearText = yearField.getText();
            String isbn = isbnField.getText();

            if (title.isEmpty() || author.isEmpty() || yearText.isEmpty() || isbn.isEmpty()) {
                statusLabel.setText("All fields are required.");
                return;
            }

            int year;
            try {
                year = Integer.parseInt(yearText);
            } catch (NumberFormatException ex) {
                statusLabel.setText("Year must be a number.");
                return;
            }

            try {
                PreparedStatement stmt = conn.prepareStatement(
                        "INSERT INTO BOOKS(title, author, year, isbn) VALUES (?, ?, ?, ?)");
                stmt.setString(1, title);
                stmt.setString(2, author);
                stmt.setInt(3, year);
                stmt.setString(4, isbn);
                stmt.executeUpdate();
                statusLabel.setText("Book added successfully.");
                books.add(new Book(title, author, year, isbn));
                titleField.clear(); authorField.clear(); yearField.clear(); isbnField.clear();
            } catch (SQLException ex) {
                statusLabel.setText("Error: " + ex.getMessage());
            }
        });

        VBox root = new VBox(10, titleLabel, titleField, authorLabel, authorField,
                yearLabel, yearField, isbnLabel, isbnField, addButton, statusLabel, table);

        stage.setScene(new Scene(root, 600, 500));
        stage.setTitle("Library Management System");
        stage.show();
    }

    private static void connectDatabase() {
        try {
            conn = DriverManager.getConnection("jdbc:sqlite:library.db");
            Statement stmt = conn.createStatement();
            stmt.execute("CREATE TABLE IF NOT EXISTS BOOKS (id INTEGER PRIMARY KEY, title TEXT, author TEXT, year INTEGER, isbn TEXT)");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static class Book {
        private final String title;
        private final String author;
        private final int year;
        private final String isbn;

        public Book(String title, String author, int year, String isbn) {
            this.title = title;
            this.author = author;
            this.year = year;
            this.isbn = isbn;
        }

        public String getTitle() { return title; }
        public String getAuthor() { return author; }
        public int getYear() { return year; }
        public String getIsbn() { return isbn; }
    }
}