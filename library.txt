import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.sql.*;

public class LibraryManagementSystem extends Application {
    private static Connection conn;

    public static void main(String[] args) {
        connectDatabase();
        launch(args);
    }

    @Override
    public void start(Stage stage) {
        // GUI Components
        Label titleLabel = new Label("Title:");
        TextField titleField = new TextField();

        Label authorLabel = new Label("Author:");
        TextField authorField = new TextField();

        Label yearLabel = new Label("Year:");
        TextField yearField = new TextField();

        Label isbnLabel = new Label("ISBN:");
        TextField isbnField = new TextField();

        Button addButton = new Button("Add Book");
        Label statusLabel = new Label();

        TableView<Book> table = new TableView<>();
        ObservableList<Book> books = FXCollections.observableArrayList();

        TableColumn<Book, String> titleCol = new TableColumn<>("Title");
        titleCol.setCellValueFactory(new PropertyValueFactory<>("title"));

        TableColumn<Book, String> authorCol = new TableColumn<>("Author");
        authorCol.setCellValueFactory(new PropertyValueFactory<>("author"));

        TableColumn<Book, Integer> yearCol = new TableColumn<>("Year");
        yearCol.setCellValueFactory(new PropertyValueFactory<>("year"));

        TableColumn<Book, String> isbnCol = new TableColumn<>("ISBN");
        isbnCol.setCellValueFactory(new PropertyValueFactory<>("isbn"));

        table.getColumns().addAll(titleCol, authorCol, yearCol, isbnCol);
        table.setItems(books);

        addButton.setOnAction(e -> {
            String title = titleField.getText();
            String author = authorField.getText();
            String yearText = yearField.getText();
            String isbn = isbnField.getText();

            if (title.isEmpty() || author.isEmpty() || yearText.isEmpty() || isbn.isEmpty()) {
                statusLabel.setText("All fields are required.");
                return;
            }

            int year;
            try {
                year = Integer.parseInt(yearText);
            } catch (NumberFormatException ex) {
                statusLabel.setText("Year must be a number.");
                return;
            }

            try {
                PreparedStatement stmt = conn.prepareStatement(
                        "INSERT INTO BOOKS(title, author, year, isbn) VALUES (?, ?, ?, ?)");
                stmt.setString(1, title);
                stmt.setString(2, author);
                stmt.setInt(3, year);
                stmt.setString(4, isbn);
                stmt.executeUpdate();
                statusLabel.setText("Book added successfully.");
                books.add(new Book(title, author, year, isbn));
                titleField.clear(); authorField.clear(); yearField.clear(); isbnField.clear();
            } catch (SQLException ex) {
                statusLabel.setText("Error: " + ex.getMessage());
            }
        });

        VBox root = new VBox(10, titleLabel, titleField, authorLabel, authorField,
                yearLabel, yearField, isbnLabel, isbnField, addButton, statusLabel, table);

        stage.setScene(new Scene(root, 600, 500));
        stage.setTitle("Library Management System");
        stage.show();
    }

    private static void connectDatabase() {
        try {
            conn = DriverManager.getConnection("jdbc:sqlite:library.db");
            Statement stmt = conn.createStatement();
            stmt.execute("CREATE TABLE IF NOT EXISTS BOOKS (id INTEGER PRIMARY KEY, title TEXT, author TEXT, year INTEGER, isbn TEXT)");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static class Book {
        private final String title;
        private final String author;
        private final int year;
        private final String isbn;

        public Book(String title, String author, int year, String isbn) {
            this.title = title;
            this.author = author;
            this.year = year;
            this.isbn = isbn;
        }

        public String getTitle() { return title; }
        public String getAuthor() { return author; }
        public int getYear() { return year; }
        public String getIsbn() { return isbn; }
    }
}

// File: controllers/AddBookController.java
package controllers;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import utils.DBConnection;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class AddBookController {

    @FXML
    private TextField titleField;

    @FXML
    private TextField authorField;

    @FXML
    private Button addButton;

    @FXML
    private void initialize() {
        addButton.setOnAction(this::handleAddBook);
    }

    private void handleAddBook(ActionEvent event) {
        String title = titleField.getText().trim();
        String author = authorField.getText().trim();

        if (title.isEmpty() || author.isEmpty()) {
            showAlert(Alert.AlertType.WARNING, "Invalid Input", "Title and Author fields must not be empty.");
            return;
        }

        try (Connection conn = DBConnection.getConnection()) {
            if (conn == null) {
                showAlert(Alert.AlertType.ERROR, "Database Error", "Failed to connect to the database.");
                return;
            }

            String insertSQL = "INSERT INTO books (title, author) VALUES (?, ?)";
            try (PreparedStatement stmt = conn.prepareStatement(insertSQL)) {
                stmt.setString(1, title);
                stmt.setString(2, author);
                stmt.executeUpdate();

                showAlert(Alert.AlertType.INFORMATION, "Success", "Book added successfully!");
                titleField.clear();
                authorField.clear();
            }
        } catch (SQLException e) {
            showAlert(Alert.AlertType.ERROR, "SQL Error", e.getMessage());
        }
    }

    private void showAlert(Alert.AlertType type, String title, String content) {
        Alert alert = new Alert(type);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }
}


// File: controllers/LoginController.java
package controllers;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import utils.DBConnection;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class LoginController {

    @FXML
    private TextField usernameField;

    @FXML
    private PasswordField passwordField;

    @FXML
    private Button loginButton;

    @FXML
    private void initialize() {
        loginButton.setOnAction(this::handleLogin);
    }

    private void handleLogin(ActionEvent event) {
        String username = usernameField.getText().trim();
        String password = passwordField.getText().trim();

        if (username.isEmpty() || password.isEmpty()) {
            showAlert(Alert.AlertType.WARNING, "Invalid Input", "Username and password must not be empty.");
            return;
        }

        try (Connection conn = DBConnection.getConnection()) {
            if (conn == null) {
                showAlert(Alert.AlertType.ERROR, "Database Error", "Failed to connect to the database.");
                return;
            }

            String sql = "SELECT * FROM users WHERE username = ? AND password = ?";
            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setString(1, username);
                stmt.setString(2, password);
                try (ResultSet rs = stmt.executeQuery()) {
                    if (rs.next()) {
                        showAlert(Alert.AlertType.INFORMATION, "Login Success", "Welcome, " + username + "!");
                        // TODO: Proceed to dashboard
                    } else {
                        showAlert(Alert.AlertType.ERROR, "Login Failed", "Invalid username or password.");
                    }
                }
            }
        } catch (SQLException e) {
            showAlert(Alert.AlertType.ERROR, "SQL Error", e.getMessage());
        }
    }

    private void showAlert(Alert.AlertType type, String title, String content) {
        Alert alert = new Alert(type);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }
}


// File: utils/DBConnection.java
package utils;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DBConnection {
    private static final String DB_URL = "jdbc:sqlite:library.db";

    public static Connection getConnection() {
        try {
            return DriverManager.getConnection(DB_URL);
        } catch (SQLException e) {
            System.err.println("Connection failed: " + e.getMessage());
            return null;
        }
    }
}
